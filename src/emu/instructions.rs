use std::fmt::Debug;
use strum_macros::AsRefStr;

#[derive(Clone)]
pub struct Instruction {
    pub instruction_type: InstructionType,
    pub address_mode: AddressMode,
    pub cycles: u8,
}

impl Instruction {
    pub fn new(instruction_type: InstructionType, address_mode: AddressMode, cycles: u8) -> Self {
        Instruction {
            instruction_type,
            address_mode,
            cycles,
        }
    }

    #[inline(always)]
    pub fn lookup(opcode: u8) -> Self {
        use AddressMode::*;
        use Instruction as I;
        use InstructionType::*;

        // References:
        // https://www.oxyron.de/html/opcodes02.html
        // https://www.nesdev.org/wiki/CPU_unofficial_opcodes

        match opcode {
            0x00 => I::new(Brk, Imm, 7),
            0x01 => I::new(Ora, Izx, 6),
            0x02 => I::new(Stp, Imp, 3),
            0x03 => I::new(Slo, Izx, 8),
            0x04 => I::new(Nop, Zp0, 3),
            0x05 => I::new(Ora, Zp0, 3),
            0x06 => I::new(Asl, Zp0, 5),
            0x07 => I::new(Slo, Zp0, 5),
            0x08 => I::new(Php, Imp, 3),
            0x09 => I::new(Ora, Imm, 2),
            0x0a => I::new(Asl, Acc, 2),
            0x0b => I::new(Anc, Imm, 2),
            0x0c => I::new(Nop, Abs, 4),
            0x0d => I::new(Ora, Abs, 4),
            0x0e => I::new(Asl, Abs, 6),
            0x0f => I::new(Slo, Abs, 6),
            0x10 => I::new(Bpl, Rel, 2),
            0x11 => I::new(Ora, Izy, 5),
            0x12 => I::new(Stp, Imp, 3),
            0x13 => I::new(Slo, Izy, 8),
            0x14 => I::new(Nop, Zpx, 4),
            0x15 => I::new(Ora, Zpx, 4),
            0x16 => I::new(Asl, Zpx, 6),
            0x17 => I::new(Slo, Zpx, 6),
            0x18 => I::new(Clc, Imp, 2),
            0x19 => I::new(Ora, Aby, 4),
            0x1a => I::new(Nop, Imp, 2),
            0x1b => I::new(Slo, Aby, 7),
            0x1c => I::new(Nop, Abx, 4),
            0x1d => I::new(Ora, Abx, 4),
            0x1e => I::new(Asl, Abx, 7),
            0x1f => I::new(Slo, Abx, 7),
            0x20 => I::new(Jsr, Abs, 6),
            0x21 => I::new(And, Izx, 6),
            0x22 => I::new(Stp, Imp, 3),
            0x23 => I::new(Rla, Izx, 8),
            0x24 => I::new(Bit, Zp0, 3),
            0x25 => I::new(And, Zp0, 3),
            0x26 => I::new(Rol, Zp0, 5),
            0x27 => I::new(Rla, Zp0, 5),
            0x28 => I::new(Plp, Imp, 4),
            0x29 => I::new(And, Imm, 2),
            0x2a => I::new(Rol, Acc, 2),
            0x2b => I::new(Anc, Imm, 2),
            0x2c => I::new(Bit, Abs, 4),
            0x2d => I::new(And, Abs, 4),
            0x2e => I::new(Rol, Abs, 6),
            0x2f => I::new(Rla, Abs, 6),
            0x30 => I::new(Bmi, Rel, 2),
            0x31 => I::new(And, Izy, 5),
            0x32 => I::new(Stp, Imp, 3),
            0x33 => I::new(Rla, Izy, 8),
            0x34 => I::new(Nop, Zpx, 4),
            0x35 => I::new(And, Zpx, 4),
            0x36 => I::new(Rol, Zpx, 6),
            0x37 => I::new(Rla, Zpx, 6),
            0x38 => I::new(Sec, Imp, 2),
            0x39 => I::new(And, Aby, 4),
            0x3a => I::new(Nop, Imp, 2),
            0x3b => I::new(Rla, Aby, 7),
            0x3c => I::new(Nop, Abx, 4),
            0x3d => I::new(And, Abx, 4),
            0x3e => I::new(Rol, Abx, 7),
            0x3f => I::new(Rla, Abx, 7),
            0x40 => I::new(Rti, Imp, 6),
            0x41 => I::new(Eor, Izx, 6),
            0x42 => I::new(Stp, Imp, 3),
            0x43 => I::new(Sre, Izx, 8),
            0x44 => I::new(Nop, Zp0, 3),
            0x45 => I::new(Eor, Zp0, 3),
            0x46 => I::new(Lsr, Zp0, 5),
            0x47 => I::new(Sre, Zp0, 5),
            0x48 => I::new(Pha, Imp, 3),
            0x49 => I::new(Eor, Imm, 2),
            0x4a => I::new(Lsr, Acc, 2),
            0x4b => I::new(Alr, Imm, 2),
            0x4c => I::new(Jmp, Abs, 3),
            0x4d => I::new(Eor, Abs, 4),
            0x4e => I::new(Lsr, Abs, 6),
            0x4f => I::new(Sre, Abs, 6),
            0x50 => I::new(Bvc, Rel, 2),
            0x51 => I::new(Eor, Izy, 5),
            0x52 => I::new(Stp, Imp, 2),
            0x53 => I::new(Sre, Izy, 8),
            0x54 => I::new(Nop, Zpx, 4),
            0x55 => I::new(Eor, Zpx, 4),
            0x56 => I::new(Lsr, Zpx, 6),
            0x57 => I::new(Sre, Zpx, 6),
            0x58 => I::new(Cli, Imp, 2),
            0x59 => I::new(Eor, Aby, 4),
            0x5a => I::new(Nop, Imp, 2),
            0x5b => I::new(Sre, Aby, 7),
            0x5c => I::new(Nop, Abx, 4),
            0x5d => I::new(Eor, Abx, 4),
            0x5e => I::new(Lsr, Abx, 7),
            0x5f => I::new(Sre, Abx, 7),
            0x60 => I::new(Rts, Imp, 6),
            0x61 => I::new(Adc, Izx, 6),
            0x62 => I::new(Stp, Imp, 3),
            0x63 => I::new(Rra, Izx, 8),
            0x64 => I::new(Nop, Zp0, 3),
            0x65 => I::new(Adc, Zp0, 3),
            0x66 => I::new(Ror, Zp0, 5),
            0x67 => I::new(Rra, Zp0, 5),
            0x68 => I::new(Pla, Imp, 4),
            0x69 => I::new(Adc, Imm, 2),
            0x6a => I::new(Ror, Acc, 2),
            0x6b => I::new(Arr, Imm, 2),
            0x6c => I::new(Jmp, Ind, 5),
            0x6d => I::new(Adc, Abs, 4),
            0x6e => I::new(Ror, Abs, 6),
            0x6f => I::new(Rra, Abs, 6),
            0x70 => I::new(Bvs, Rel, 2),
            0x71 => I::new(Adc, Izy, 5),
            0x72 => I::new(Stp, Imp, 3),
            0x73 => I::new(Rra, Izy, 8),
            0x74 => I::new(Nop, Zpx, 4),
            0x75 => I::new(Adc, Zpx, 4),
            0x76 => I::new(Ror, Zpx, 6),
            0x77 => I::new(Rra, Zpx, 6),
            0x78 => I::new(Sei, Imp, 2),
            0x79 => I::new(Adc, Aby, 4),
            0x7a => I::new(Nop, Imp, 2),
            0x7b => I::new(Rra, Aby, 7),
            0x7c => I::new(Nop, Abx, 4),
            0x7d => I::new(Adc, Abx, 4),
            0x7e => I::new(Ror, Abx, 7),
            0x7f => I::new(Rra, Abx, 7),
            0x80 => I::new(Nop, Imm, 2),
            0x81 => I::new(Sta, Izx, 6),
            0x82 => I::new(Nop, Imm, 2),
            0x83 => I::new(Sax, Izx, 6),
            0x84 => I::new(Sty, Zp0, 3),
            0x85 => I::new(Sta, Zp0, 3),
            0x86 => I::new(Stx, Zp0, 3),
            0x87 => I::new(Sax, Zp0, 3),
            0x88 => I::new(Dey, Imp, 2),
            0x89 => I::new(Nop, Imp, 2),
            0x8a => I::new(Txa, Imp, 2),
            0x8b => I::new(Xaa, Imm, 2),
            0x8c => I::new(Sty, Abs, 4),
            0x8d => I::new(Sta, Abs, 4),
            0x8e => I::new(Stx, Abs, 4),
            0x8f => I::new(Sax, Abs, 4),
            0x90 => I::new(Bcc, Rel, 2),
            0x91 => I::new(Sta, Izy, 6),
            0x92 => I::new(Stp, Imp, 3),
            0x93 => I::new(Ahx, Izy, 6),
            0x94 => I::new(Sty, Zpx, 4),
            0x95 => I::new(Sta, Zpx, 4),
            0x96 => I::new(Stx, Zpy, 4),
            0x97 => I::new(Sax, Zpy, 4),
            0x98 => I::new(Tya, Imp, 2),
            0x99 => I::new(Sta, Aby, 5),
            0x9a => I::new(Txs, Imp, 2),
            0x9b => I::new(Tas, Aby, 5),
            0x9c => I::new(Shy, Abx, 5),
            0x9d => I::new(Sta, Abx, 5),
            0x9e => I::new(Shx, Aby, 5),
            0x9f => I::new(Ahx, Aby, 5),
            0xa0 => I::new(Ldy, Imm, 2),
            0xa1 => I::new(Lda, Izx, 6),
            0xa2 => I::new(Ldx, Imm, 2),
            0xa3 => I::new(Lax, Izx, 6),
            0xa4 => I::new(Ldy, Zp0, 3),
            0xa5 => I::new(Lda, Zp0, 3),
            0xa6 => I::new(Ldx, Zp0, 3),
            0xa7 => I::new(Lax, Zp0, 3),
            0xa8 => I::new(Tay, Imp, 2),
            0xa9 => I::new(Lda, Imm, 2),
            0xaa => I::new(Tax, Imp, 2),
            0xab => I::new(Las, Aby, 4),
            0xac => I::new(Ldy, Abs, 4),
            0xad => I::new(Lda, Abs, 4),
            0xae => I::new(Ldx, Abs, 4),
            0xaf => I::new(Lax, Abs, 4),
            0xb0 => I::new(Bcs, Rel, 2),
            0xb1 => I::new(Lda, Izy, 5),
            0xb2 => I::new(Stp, Imp, 3),
            0xb3 => I::new(Lax, Izy, 5),
            0xb4 => I::new(Ldy, Zpx, 4),
            0xb5 => I::new(Lda, Zpx, 4),
            0xb6 => I::new(Ldx, Zpy, 4),
            0xb7 => I::new(Lax, Zpy, 4),
            0xb8 => I::new(Clv, Imp, 2),
            0xb9 => I::new(Lda, Aby, 4),
            0xba => I::new(Tsx, Imp, 2),
            0xbb => I::new(Las, Aby, 4),
            0xbc => I::new(Ldy, Abx, 4),
            0xbd => I::new(Lda, Abx, 4),
            0xbe => I::new(Ldx, Aby, 4),
            0xbf => I::new(Lax, Aby, 4),
            0xc0 => I::new(Cpy, Imm, 2),
            0xc1 => I::new(Cmp, Izx, 6),
            0xc2 => I::new(Nop, Imm, 2),
            0xc3 => I::new(Dcp, Izx, 8),
            0xc4 => I::new(Cpy, Zp0, 3),
            0xc5 => I::new(Cmp, Zp0, 3),
            0xc6 => I::new(Dec, Zp0, 5),
            0xc7 => I::new(Dcp, Zp0, 5),
            0xc8 => I::new(Iny, Imp, 2),
            0xc9 => I::new(Cmp, Imm, 2),
            0xca => I::new(Dex, Imp, 2),
            0xcb => I::new(Axs, Imm, 2),
            0xcc => I::new(Cpy, Abs, 4),
            0xcd => I::new(Cmp, Abs, 4),
            0xce => I::new(Dec, Abs, 6),
            0xcf => I::new(Dcp, Abs, 6),
            0xd0 => I::new(Bne, Rel, 2),
            0xd1 => I::new(Cmp, Izy, 5),
            0xd2 => I::new(Stp, Imp, 3),
            0xd3 => I::new(Dcp, Izy, 8),
            0xd4 => I::new(Nop, Zpx, 4),
            0xd5 => I::new(Cmp, Zpx, 4),
            0xd6 => I::new(Dec, Zpx, 6),
            0xd7 => I::new(Dcp, Zpx, 6),
            0xd8 => I::new(Cld, Imp, 2),
            0xd9 => I::new(Cmp, Aby, 4),
            0xda => I::new(Nop, Imp, 2),
            0xdb => I::new(Dcp, Aby, 7),
            0xdc => I::new(Nop, Abx, 4),
            0xdd => I::new(Cmp, Abx, 4),
            0xde => I::new(Dec, Abx, 7),
            0xdf => I::new(Dcp, Abx, 7),
            0xe0 => I::new(Cpx, Imm, 2),
            0xe1 => I::new(Sbc, Izx, 6),
            0xe2 => I::new(Nop, Imm, 2),
            0xe3 => I::new(Isc, Izx, 8),
            0xe4 => I::new(Cpx, Zp0, 3),
            0xe5 => I::new(Sbc, Zp0, 3),
            0xe6 => I::new(Inc, Zp0, 5),
            0xe7 => I::new(Isc, Zp0, 5),
            0xe8 => I::new(Inx, Imp, 2),
            0xe9 => I::new(Sbc, Imm, 2),
            0xea => I::new(Nop, Imp, 2),
            0xeb => I::new(Sbc, Imm, 2),
            0xec => I::new(Cpx, Abs, 4),
            0xed => I::new(Sbc, Abs, 4),
            0xee => I::new(Inc, Abs, 6),
            0xef => I::new(Isc, Abs, 6),
            0xf0 => I::new(Beq, Rel, 2),
            0xf1 => I::new(Sbc, Izy, 5),
            0xf2 => I::new(Stp, Imp, 3),
            0xf3 => I::new(Isc, Izy, 8),
            0xf4 => I::new(Nop, Zpx, 4),
            0xf5 => I::new(Sbc, Zpx, 4),
            0xf6 => I::new(Inc, Zpx, 6),
            0xf7 => I::new(Isc, Zpx, 6),
            0xf8 => I::new(Sed, Imp, 2),
            0xf9 => I::new(Sbc, Aby, 4),
            0xfa => I::new(Nop, Imp, 2),
            0xfb => I::new(Isc, Aby, 7),
            0xfc => I::new(Nop, Abx, 4),
            0xfd => I::new(Sbc, Abx, 4),
            0xfe => I::new(Inc, Abx, 7),
            0xff => I::new(Isc, Abx, 7),
        }
    }
}

#[derive(Debug, AsRefStr, Copy, Clone)]
pub enum AddressMode {
    Imp,
    Acc,
    Imm,
    Zp0,
    Zpx,
    Zpy,
    Rel,
    Abs,
    Abx,
    Aby,
    Ind,
    Izx,
    Izy,
}

impl AddressMode {
    pub fn arg_size(&self) -> u16 {
        match self {
            AddressMode::Imp => 0,
            AddressMode::Acc => 0,
            AddressMode::Imm => 1,
            AddressMode::Zp0 => 1,
            AddressMode::Zpx => 1,
            AddressMode::Zpy => 1,
            AddressMode::Rel => 1,
            AddressMode::Abs => 2,
            AddressMode::Abx => 2,
            AddressMode::Aby => 2,
            AddressMode::Ind => 2,
            AddressMode::Izx => 1,
            AddressMode::Izy => 1,
        }
    }
}

#[derive(Debug, AsRefStr, Copy, Clone)]
pub enum InstructionType {
    Adc,
    And,
    Asl,
    Bcc,
    Bcs,
    Beq,
    Bit,
    Bmi,
    Bne,
    Bpl,
    Brk,
    Bvc,
    Bvs,
    Clc,
    Cld,
    Cli,
    Clv,
    Cmp,
    Cpx,
    Cpy,
    Dec,
    Dex,
    Dey,
    Eor,
    Inc,
    Inx,
    Iny,
    Jmp,
    Jsr,
    Lda,
    Ldx,
    Ldy,
    Lsr,
    Nop,
    Ora,
    Pha,
    Php,
    Pla,
    Plp,
    Rol,
    Ror,
    Rti,
    Rts,
    Sbc,
    Sec,
    Sed,
    Sei,
    Sta,
    Stx,
    Sty,
    Tax,
    Tay,
    Tsx,
    Txa,
    Txs,
    Tya,
    Slo,
    Rla,
    Sre,
    Rra,
    Sax,
    Lax,
    Dcp,
    Isc,
    Anc,
    Alr,
    Arr,
    Xaa,
    Axs,
    Ahx,
    Shy,
    Shx,
    Tas,
    Las,
    Stp,
}
